<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="OmegaT-3.5.4" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>## A Visit to The Playground ##
We have worked hard and learned much, so we deserve some playground time, at the Babylon.js Playground web site.&amp;nbsp; Here is a scene that I once created and then saved... at the playground:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T033340Z" creationid="aceway" creationdate="20160404T033340Z">
        <seg>## 访问 娱乐展示 ##
我们做得很努力且学到不少东西了, 所以我们可以获得一些时间在 Babylon.js 娱乐展示网站游乐一下了.&amp;nbsp; 此处是创建保存一次性场景的练习场:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Animation Blending</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111439Z" creationid="aceway" creationdate="20160402T111439Z">
        <seg>## 动画渲染</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Attach events to animations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151933Z" creationid="aceway" creationdate="20160402T151933Z">
        <seg>## 给动画添加事件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Babylon.js WebGL Game Creation System!##</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T031550Z" creationid="aceway" creationdate="20160403T031550Z">
        <seg>## Babylon.js 页面图像库 游戏创建系统!##</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## BabylonJS Playground ##</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T033413Z" creationid="aceway" creationdate="20160404T033413Z">
        <seg>## BabylonJS 娱乐展示 ##</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Basic animation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160330T033807Z" creationid="aceway" creationdate="20160330T033807Z">
        <seg>## 简单动画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Complex animation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T150904Z" creationid="aceway" creationdate="20160402T150904Z">
        <seg>## 复杂动画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Controlling animations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110133Z" creationid="aceway" creationdate="20160402T110133Z">
        <seg>## 控制动画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Easing functions</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160011Z" creationid="aceway" creationdate="20160402T125349Z">
        <seg>## 简化函数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Helper function</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110605Z" creationid="aceway" creationdate="20160402T110605Z">
        <seg>## 帮助函数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Scene File Layout ##</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T131232Z" creationid="aceway" creationdate="20160403T131209Z">
        <seg>## 场景文件格式 ##</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## The Browser ##
Simply put, you will need to use a browser that supports WebGL and has Javascript activated.&amp;nbsp; Internet Explorer 11+, Firefox 4+, Google Chrome 9+, Opera 12+, etc.&amp;nbsp; WebGL is also supported by many browsers for mobile devices.&amp;nbsp; I will let you investigate the details of mobile WebGL, but know that Babylon.js has many features designed with mobile WebGL in mind.&amp;nbsp; Additionally, Babylon.js has complete support for full-immersion stereoscopic viewing and virtual reality head gear!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T130020Z" creationid="aceway" creationdate="20160403T130020Z">
        <seg>## 浏览器 ##
简而言之,你需要一个支持WebGL并且激活了javascript的浏览器.&amp;nbsp; IE11+, Firefox 4+, Google Chrome 9+, Opera 12+, 等都可以.&amp;nbsp; WebGL 也被许多移动设备等浏览器支持.&amp;nbsp; 请你自己调查移动设备的WEBGL详细情况, 但是你需要知晓的是 Babylon.js 有许多特性在设计时考虑了移动设备WebGL的.&amp;nbsp; 此外, Babylon.js 已经全面支持沉浸式立体视野和虚拟现实头盔!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Useful Links ##
| Clickable Link&amp;nbsp; | What you will find |
| ------------- | ------------- |
| [**BabylonJS Main Website**](http://www.babylonjs.com/) |&amp;nbsp; Many great demos and useful links near the bottom |
| [**BabylonJS Forum**](http://www.html5gamedevs.com/forum/16-babylonjs) | Ask questions, help others, meet great friends |
| [**BabylonJS GitHub Site**](http://www.babylonjs.com) |&amp;nbsp; Downloads, tutorials, and many links (scroll down when there) |
| [**BabylonJS API Documentation**](http://doc.babylonjs.com) | A complete API map of all Babylon.js classes |
| [**BabylonJS Playground**](http://babylonjs-playground.azurewebsites.net) |&amp;nbsp; On-line white-boarding and basic scene testing site |
| [**BabylonJS Sandbox**](http://www.babylonjs.com/sandbox) | On-line site for testing .babylon files exported from modelers |</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T131125Z" creationid="aceway" creationdate="20160403T131125Z">
        <seg>## 有用链接 ##
| 可点击链接&amp;nbsp; | 可找到内容 |
| ------------- | ------------- |
| [**BabylonJS 主站**](http://www.babylonjs.com/) |&amp;nbsp; 许多很棒的演示而且底部有有用的链接 |
| [**BabylonJS 论坛**](http://www.html5gamedevs.com/forum/16-babylonjs) | 询问,助人,预见小伙伴 |
| [**BabylonJS GitHub 站点**](http://www.babylonjs.com) |&amp;nbsp; 下载, 教程, 和许多链接 (在那个页面的底部) |
| [**BabylonJS API 文档**](http://doc.babylonjs.com) | 所有Babylon.js类的完整 API 图册 |
| [**BabylonJS 娱乐展示**](http://babylonjs-playground.azurewebsites.net) |&amp;nbsp; 在线的,白板式 基础场景测试站点 |
| [**BabylonJS 沙箱**](http://www.babylonjs.com/sandbox) | 在线测试从建模工具导出的 .babylon 文件.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### The CSS Styles - Blue Section ###
&amp;nbsp;Notice the blue section of the big picture.&amp;nbsp; That is the CSS (Cascading Style Sheets) styles used to present the scene's web page,&amp;nbsp; and adjust its WebGL canvas to be centered and filled-out nicely in your browser.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030032Z" creationid="aceway" creationdate="20160404T001438Z">
        <seg>### CSS 样式 - 蓝色部分 ###
&amp;nbsp;注意大图片中的蓝色部分.&amp;nbsp; 那是用来呈现场景页面的 CSS (布局样式表) 样式,&amp;nbsp; 它会调整 WebGL 画布居中且填满你的整个浏览器.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### The External Includes - Red Section ###</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T025949Z" creationid="aceway" creationdate="20160403T132226Z">
        <seg>### 外部包含 - 红色部分 ###</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### The Internal Include - Green Section ###</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030054Z" creationid="aceway" creationdate="20160404T002127Z">
        <seg>### 内部包含 - 绿色部分 ###</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### The createScene() Function - Purple Section ###
The purple section of the big picture... is the createScene() 'function'... a Javascript 'function'.&amp;nbsp; It is the most important section of a 'single HTML file' Babylon.js scene.&amp;nbsp; You are not required to use a createScene() function in your Javascript code, but please do... in these early days of your webGL learning.&amp;nbsp; I have some magic to show you... which is available if you keep most of your scene code... inside a function called createScene().&amp;nbsp; (Like the one shown in the big picture.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T031410Z" creationid="aceway" creationdate="20160404T025918Z">
        <seg>### createScene() 函数 - 紫色部分 ###
大图片里的紫色部分...是createScene() '函数'... 一个Javascript '函数'.&amp;nbsp; 它是'单HTML文件'场景里的最重要部分的.&amp;nbsp; 在你的Javascript代码里你不必使用createScene()函数, 但是在学习WebGL的早期日子里,请这样做吧.&amp;nbsp; 我有些魔法展示给你看... 如果你把大部分的场景代码放到一个叫做createScene()的函数里.&amp;nbsp; (就像大图片里展示的那样.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'Includes' is not necessarily the best term to describe the red section of the big picture, but I will be using that term often in this tutorial.&amp;nbsp; Three external Javascript files are being included into this scene.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T025957Z" creationid="aceway" creationdate="20160403T132340Z">
        <seg>'包含' 不一定是对 图中红色部分的最好的描述方式, 但是在这个教程中我会常常使用这中方式.&amp;nbsp; 三个外部的Javascript文件被包含到这个场景里.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use previous values and increment it: ```BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE```
* Restart from initial value: ```BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE```
* Keep their final value: ```BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054823Z" creationid="aceway@qq.com" creationdate="20160331T054823Z">
        <seg>* 使用之前的值然后递增： ```BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE```
* 从初始值重启 ```BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE```
* 保持最后的值: ```BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Next step**</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T152605Z" creationid="aceway" creationdate="20160402T152605Z">
        <seg>**下一步**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameter 1** - Name of this animation, nothing more.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054041Z" creationid="aceway@qq.com" creationdate="20160331T014235Z">
        <seg>**参数1** - 动画的名称，仅此而已。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameter 2** - The property concerned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054046Z" creationid="aceway@qq.com" creationdate="20160331T014303Z">
        <seg>**参数 2** - 关心的属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameter 3** - Frames per second requested: highest FPS possible in this animation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054101Z" creationid="aceway@qq.com" creationdate="20160331T014526Z">
        <seg>**参数 3** - 请求的每秒帧数：这个动画里最大 的FPS。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameter 4** - Type of change.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054105Z" creationid="aceway@qq.com" creationdate="20160331T014543Z">
        <seg>**参数 4** - 修改的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameter 5** - Finally, you have to decide and enter the type of behavior this animation will take at its upper limit (e.g. will it continue on, will it begin again, will it stop at the last key value, etc.):</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T083821Z" creationid="aceway@qq.com" creationdate="20160331T020033Z">
        <seg>**参数 5** - 最后,  你需要决定并输入这个动画的行为类型，这些会决定动画的受限(比如:当到最后一帧时是否继续，是否重新开始，或者停止)：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Parameters for scene.beginAnimation:**</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085729Z" creationid="aceway@qq.com" creationdate="20160331T085729Z">
        <seg>**提供给scene.beginAnimation的参数：**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- The animation is starting right after the method call.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111136Z" creationid="aceway" creationdate="20160402T111136Z">
        <seg>- 这些动画在该函数调用后立即播放.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- ```BABYLON.EasingFunction.EASINGMODE_EASEINOUT``` : Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160304Z" creationid="aceway" creationdate="20160402T144354Z">
        <seg>- ```BABYLON.EasingFunction.EASINGMODE_EASEINOUT``` : 头半部份用EASEIN的方式,后半部份用EASEOUT的方式来控制插入. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- ```BABYLON.EasingFunction.EASINGMODE_EASEOUT``` : Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T144214Z" creationid="aceway" creationdate="20160402T143618Z">
        <seg>- ```BABYLON.EasingFunction.EASINGMODE_EASEOUT``` : 按照内插法 减去 简化函数的公式输出 来控制插入 .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>---
ID_PAGE: 22621
PG_TITLE: A Babylon.js Primer
---
Welcome to the...</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T031442Z" creationid="aceway" creationdate="20160403T031442Z">
        <seg>---
ID_PAGE: 22621
PG_TITLE: A Babylon.js 初级教程
---
欢迎到此...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Adding animation to my torus animations collection
torus.animations.push(animationTorus);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T145313Z" creationid="aceway" creationdate="20160402T145313Z">
        <seg>// 将动画添加到我的 椭圆环体动画集中
torus.animations.push(animationTorus);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Adding the easing function to the animation
animationTorus.setEasingFunction(easingFunction);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T145237Z" creationid="aceway" creationdate="20160402T145237Z">
        <seg>// 将简化函数添加到动画中
animationTorus.setEasingFunction(easingFunction);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Animation keys
var keysTorus = [];
keysTorus.push({ frame: 0, value: torus.position });
keysTorus.push({ frame: 120, value: nextPos });
animationTorus.setKeys(keysTorus);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T145024Z" creationid="aceway" creationdate="20160402T145024Z">
        <seg>// 动画片段的键值
var keysTorus = [];
keysTorus.push({ frame: 0, value: torus.position });
keysTorus.push({ frame: 120, value: nextPos });
animationTorus.setKeys(keysTorus);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Creating an easing function
var easingFunction = new BABYLON.CircleEase();</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T145044Z" creationid="aceway" creationdate="20160402T145044Z">
        <seg>// 创建一个简化函数
var easingFunction = new BABYLON.CircleEase();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// For each easing function, you can choose beetween EASEIN (default), EASEOUT, EASEINOUT
easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T145214Z" creationid="aceway" creationdate="20160402T145214Z">
        <seg>// 对于每个简化函数, 你可以从 EASEIN (default), EASEOUT, EASEINOUT 中选择一个模式
easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Gradient is the percent of value change</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T150402Z" creationid="aceway" creationdate="20160402T150402Z">
        <seg>// Gradient 是改变值的百分比</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Here is the core method you should change to make your own Easing Function</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T150340Z" creationid="aceway" creationdate="20160402T150340Z">
        <seg>// 这是你创建自己的简化函数时应该修改的核心方法.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// the torus destination position
var nextPos = torus.position.add(new BABYLON.Vector3(-80, 0, 0));</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T144959Z" creationid="aceway" creationdate="20160402T144959Z">
        <seg>// 椭圆环体的目标位置
var nextPos = torus.position.add(new BABYLON.Vector3(-80, 0, 0));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//At the animation key 0, the value of scaling is "1"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T154509Z" creationid="aceway@qq.com" creationdate="20160331T085257Z">
        <seg>//在动画0键，放大倍数是 1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//At the animation key 100, the value of scaling is "1"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085404Z" creationid="aceway@qq.com" creationdate="20160331T085404Z">
        <seg>//在动画的第100键，放大倍数是1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//At the animation key 20, the value of scaling is "0.2"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085336Z" creationid="aceway@qq.com" creationdate="20160331T085336Z">
        <seg>//在动画的第20键，放大倍数是0.2。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//Create a box</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T014056Z" creationid="aceway@qq.com" creationdate="20160331T014056Z">
        <seg>//创建盒子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//Finally, launch animations on torus, from key 0 to key 120 with loop activated
scene.beginAnimation(torus, 0, 120, true);
```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160431Z" creationid="aceway" creationdate="20160402T145450Z">
        <seg>//最后, 以不断重复从0到120键值的方式加载动画
scene.beginAnimation(torus, 0, 120, true);
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//Here... your basic scene as before: [scene, light, camera]</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T014049Z" creationid="aceway@qq.com" creationdate="20160331T014049Z">
        <seg>//这儿... 作为开头的基础场景元素[scene,light,camera]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//Your code here
});
```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151229Z" creationid="aceway" creationdate="20160402T151218Z">
        <seg>//你的代码放在这里
});
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After that comes oimo.js - a different physics 'engine' that performs a similar function to cannon.js, but is generally faster although it lacks some of the more advanced features present in cannon.js.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T133432Z" creationid="aceway" creationdate="20160403T133432Z">
        <seg>之后的是 oimo.js - 一个不同的物理 '引擎',  其表现的功能有点像 cannon.js, 但是它更快速高效, 尽管它缺少 cannon.js中出现的许多高级特性.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All those easing functions are implemented in BABYLON allowing you to apply custom mathematical formulas to your animations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160125Z" creationid="aceway" creationdate="20160402T125926Z">
        <seg>所有这些BABYLON实现的简化函数,都允许使用自定义的数学公式应用在动画上.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although this playground is blending the same animation into itself, more often, a different animation will be blended-into the original, such as when a walking character changes to running.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T125321Z" creationid="aceway" creationdate="20160402T125321Z">
        <seg>尽管这个娱乐展示的是 渲染自身重复的动画, 但更常见的情况是, 渲染不同的动画 - 进入不同的状态,比如当一个走动中的角色切换到跑动.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although we have another tutorial that covers basic scenes, I would like you to now EXAMINE a basic Babylon.js scene file.&amp;nbsp; So here we go:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T131537Z" creationid="aceway" creationdate="20160403T131537Z">
        <seg>尽管我们有另一个教程盖含基础场景, 我仍然希望你现在检查下一个基本的 Babylon.js 场景文件的内容.&amp;nbsp; 所以我们现在就开始:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Animation is defined by various properties and a collection of keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T053953Z" creationid="aceway" creationdate="20160330T154019Z">
        <seg>一个动画是由许多属性和一系列的键值定义的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An event is a function that will be called at a given frame.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T152230Z" creationid="aceway" creationdate="20160402T152230Z">
        <seg>一个事件 是在某指定帧会被调用的函数.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And that's it!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T152558Z" creationid="aceway" creationdate="20160402T152558Z">
        <seg>就这些!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And you are done!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T105307Z" creationid="aceway" creationdate="20160402T105307Z">
        <seg>你做到了!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Animations
---
# Animation
Your scene is beginning to look great, but it is very static.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T053918Z" creationid="aceway" creationdate="20160330T031952Z">
        <seg>动画
---
# 动画
你的场景开始看起来很棒了，但它仍然是呆板且静态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of Babylon.js 2.3+, you can  start an animation with *enableBlending* = true.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155805Z" creationid="aceway" creationdate="20160402T111552Z">
        <seg>作为2.3+版本的 Babylon.js, 你能通过设置 *enableBlending* 为 true来启动一个动画.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default these functions are the following:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110523Z" creationid="aceway" creationdate="20160402T110523Z">
        <seg>默认情况下,这个函数如下:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't forget to [visit our API documentation](http://doc.babylonjs.com/classes/) in order to learn more about the [**Babylon.js Animation**](http://doc.babylonjs.com/classes/Animation) and [**Babylon.js Animatable**](http://doc.babylonjs.com/classes/Animatable) classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160757Z" creationid="aceway" creationdate="20160402T151914Z">
        <seg>不要忘记 [访问我们的API文档](http://doc.babylonjs.com/classes/) 以学习更多关于 [**Babylon.js 动画**](http://doc.babylonjs.com/classes/Animation) 和 [**Babylon.js 支持动画的**](http://doc.babylonjs.com/classes/Animatable) 类.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't hesitate to combine many animations for one mesh object... by creating more Animations and pushing them into the mesh's _animation_ property.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110115Z" creationid="aceway" creationdate="20160402T110115Z">
        <seg>不要犹豫在一个网格对象上合并多个动画, 通过创建多个动画片段并把它们追加到 _animation_ 属性上.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t hesitate to combine all those types of animations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151523Z" creationid="aceway" creationdate="20160402T151523Z">
        <seg>不用犹豫, 可以混合使用所有这些动画类型.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each Animation has a property called ```currentFrame``` that indicates the current animation key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110235Z" creationid="aceway" creationdate="20160402T110235Z">
        <seg>每个动画片段都有一个属性: ```currentFrame``` , 其指明当前动画的键.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of these includes are JavaSCRIPT files, and so they are included-in by using HTML `&lt;SCRIPT&gt;` elements/tags.&amp;nbsp; The shown 'src' (source location) of these files is at the Babylon.js web site folders, but later I will tell you how to put these files on your home hard drive if you wish, and include them from there.&amp;nbsp; They load-in faster when they are 'local', but you will need to change the 'src' URL once you have saved them locally.&amp;nbsp; I will show you how to do that soon.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T002328Z" creationid="aceway" creationdate="20160403T135120Z">
        <seg>每个包含都是 JavaSCRIPT 文件, 所以它们被放在使用 HTML的 `&lt;SCRIPT&gt;` 元素/标签中.&amp;nbsp; 这些文件里显示的 'src' (源码位置) 在 the Babylon.js 网站的文件夹里, 但是稍后我将告诉你如何把这些文件放到你的硬盘驱动器里 - 如果你希望那样做, 然后从那儿包含它们.&amp;nbsp; 当是"本地" 时她们加载会更快, 但是当你将它们保存到本地后你需要修改 'src' 的网址; 我很快会告诉你如何做的.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every key represents the value of the Animation at that key's given time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T013853Z" creationid="aceway@qq.com" creationdate="20160331T013853Z">
        <seg>每个键值代表了动画片段在那个时刻的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exact values are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054113Z" creationid="aceway@qq.com" creationdate="20160331T014821Z">
        <seg>具体的值会是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Feel free to try different animations on different objects, then come back and learn all about [**Sprites**](http://doc.babylonjs.com/tutorials/Sprites).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160920Z" creationid="aceway" creationdate="20160402T152948Z">
        <seg>请自己尝试在不同的物体上实现不同的动画, 然后回到这里再学习更多的关于 [**精灵**](http://doc.babylonjs.com/tutorials/Sprites).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can extend the **EasingFunction** base function to create your own easing function, like this :</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160555Z" creationid="aceway" creationdate="20160402T150120Z">
        <seg>最后, 你能够扩展 **EasingFunction** 基础函数, 从而创造你自己的简化函数,像这样:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can launch your animation in one line of code, at any time in your application:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085655Z" creationid="aceway@qq.com" creationdate="20160331T085655Z">
        <seg>最后，你可以在你应用的任何时间点通过一行代码加载动画。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, create our Animation object:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054019Z" creationid="aceway@qq.com" creationdate="20160331T014146Z">
        <seg>首先，创建动画对象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For advanced keyframe animation, you can also define the functions used to interpolate (transition) between keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110459Z" creationid="aceway" creationdate="20160402T110459Z">
        <seg>对于高级的关键帧动画, 你也可以定义个函数实现在键之间插入过度效果.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For purpose, here is a good reference to create your curve algorithm : [http://cubic-bezier.com](http://cubic-bezier.com)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160520Z" creationid="aceway" creationdate="20160402T145829Z">
        <seg>这特地准备了一个参考来说明如何创建你的曲线算法 : [http://cubic-bezier.com](http://cubic-bezier.com)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From Babylon.js version 2.3, you can attach [animation events](http://doc.babylonjs.com/classes/AnimationEvent) to specific frames on an animation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T152058Z" creationid="aceway" creationdate="20160402T152058Z">
        <seg>从Babylon.js 2.3 版本开始, 你可以附加 [动画事件](http://doc.babylonjs.com/classes/AnimationEvent) 给一个动画的指定帧.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are the predefined easing functions you can use : 
- ```BABYLON.CircleEase()```
- ```BABYLON.BackEase(amplitude)```
- ```BABYLON.BounceEase(bounces, bounciness)```
- ```BABYLON.CubicEase()```
- ```BABYLON.ElasticEase(oscillations, springiness)```
- ```BABYLON.ExponentialEase(exponent)```
- ```BABYLON.PowerEase(power)```
- ```BABYLON.QuadraticEase()```
- ```BABYLON.QuarticEase()```
- ```BABYLON.QuinticEase()```
- ```BABYLON.SineEase()```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T130012Z" creationid="aceway" creationdate="20160402T130012Z">
        <seg>这儿是一些你可直接使用的预定义简化函数 : 
- ```BABYLON.CircleEase()```
- ```BABYLON.BackEase(amplitude)```
- ```BABYLON.BounceEase(bounces, bounciness)```
- ```BABYLON.CubicEase()```
- ```BABYLON.ElasticEase(oscillations, springiness)```
- ```BABYLON.ExponentialEase(exponent)```
- ```BABYLON.PowerEase(power)```
- ```BABYLON.QuadraticEase()```
- ```BABYLON.QuarticEase()```
- ```BABYLON.QuinticEase()```
- ```BABYLON.SineEase()```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a pretty cool implementation using the bezier curve algorithm :</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T150006Z" creationid="aceway" creationdate="20160402T150006Z">
        <seg>这儿是个非常酷的使用贝塞尔算法的实现 :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a straightforward sample to animate a torus within a ```CirleEase``` easing function :</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T144743Z" creationid="aceway" creationdate="20160402T144743Z">
        <seg>这儿是个简单的例子, 使用简化函数 ```CirleEase``` 来让椭圆环体动起来的动画 :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a straightforward sample using the **CreateAndStartAnimation()** function :</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111354Z" creationid="aceway" creationdate="20160402T111354Z">
        <seg>这有个使用 **CreateAndStartAnimation()** 函数的例子:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is the fifth HTML SCRIPT element/tag in the big picture scene file.&amp;nbsp; We used 4 SCRIPT elements/tags to do the external includes.&amp;nbsp; This one is an INTERNAL include.&amp;nbsp; Notice that it has no 'src' URL.&amp;nbsp; That is because it is a section of Javascript code that YOU have written directly into this document.&amp;nbsp; Yes, YOU.&amp;nbsp; Now you are a Javascript programmer!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030127Z" creationid="aceway" creationdate="20160404T002750Z">
        <seg>这是大图片场景文件里的第五个 HTML SCRIPT 元素/标签 .&amp;nbsp; 我们用了4个 SCRIPT 元素/标签 实现外部包含.&amp;nbsp; 这个是内部包含.&amp;nbsp; 注意没有 'src' 地址.&amp;nbsp; 那是因为它是你直接写入这个文档的 Javascript代码部分.&amp;nbsp; 是的, 你写的.&amp;nbsp; 现在你是名 Javascript 程序员!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we want to scale an object on the X axis, so it will be “scaling.x”.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054056Z" creationid="aceway@qq.com" creationdate="20160331T014428Z">
        <seg>此处我们想在X轴方向上放大对象, 所以此处使用“scaling.x”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here you decide and enter what kind of value will be modified: is it a float (e.g. a translation), a vector (e.g. a direction), or a quaternion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054110Z" creationid="aceway@qq.com" creationdate="20160331T014803Z">
        <seg>此处你决定开始修改什么类型的数据：floating（比如是平移），一个向量(比如是方向)，或四元数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If well done, it’s very powerful.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151549Z" creationid="aceway" creationdate="20160402T151549Z">
        <seg>如果我们做到了, 它将是强大的.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want more information about easing functions, here are some useful links : 
- [MSDN Easing functions documentation](http://msdn.microsoft.com/en-us/library/ee308751.aspx)
- [Easing functions cheat sheet](http://easings.net/fr)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T125800Z" creationid="aceway" creationdate="20160402T125800Z">
        <seg>如果你希望获得关于简化函数的更多信息,这儿有一些有用的链接 : 
- [MSDN 简化函数文档](http://msdn.microsoft.com/en-us/library/ee308751.aspx)
- [简化函数懒人表单](http://easings.net/fr)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In our case, we want to scale our box, but not in a linear way: it must be faster when it became larger, and slower when it became thinner.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T083401Z" creationid="aceway@qq.com" creationdate="20160331T083401Z">
        <seg>在我们这个案例，我们想放大盒子，但是不是线性方式，而是放大时盒子越大则放大的速度越快，缩小时盒子越小缩得越慢。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the playground demo below, every time you click on the FPS marker, the new animation is blended with the box's current position:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T124804Z" creationid="aceway" creationdate="20160402T112100Z">
        <seg>在下面这个娱乐展示中, 每次你点击 FPS 标签时, 那个盒子的当前位置会被作为参数重新渲染. :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the createScene() function (the purple section)... we will be doing the actual Babylon.js commands and directives that cause beautiful webGL to happen.&amp;nbsp; The rest of the big picture sections... are simply helpers and preparations... for the fantastic purple section... the createScene() function.&amp;nbsp; Remember its name, because I will be mentioning it often in many Playpen Series tutorials.&amp;nbsp; It will become your best friend.&amp;nbsp; This I can promise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T032447Z" creationid="aceway" creationdate="20160404T032427Z">
        <seg>在 createScene() 函数里 (紫色部分)... 我们将开始执行真实的 Babylon.js 指令, 以产生漂亮的WebGL效果出现.&amp;nbsp; 大图片里的剩下部分... 是些简单的辅助和准备工作... 为神奇的紫色部分(那个createScene()函数)服务的.&amp;nbsp; 记住这个函数名, 因为我将在许多游戏练习系列教材里常常提到它.&amp;nbsp; 我能保证,它将成为你最好的支持者.&amp;nbsp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It makes a complicated system, (WebGL,) much easier to use.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T032859Z" creationid="aceway" creationdate="20160403T032859Z">
        <seg>Babylon.js构造里一个复杂的系统, 让网页图形库更容易使用.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's very simple to do this:
```javascript
// 3 parameters to create an event:
// - The frame at which the event will be triggered
// - The action to execute
// - A boolean if the event should execute only once (false by default)
var event1 = new BABYLON.AnimationEvent(50, function() { console.log("Yeah!"); }, true);
// Attach your event to your animation
animation.addEvent(event1);
```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160828Z" creationid="aceway" creationdate="20160402T152545Z">
        <seg>这样做非常简单:
```javascript
// 用3个参数创建一个事件:
// - 触发事件的帧
// - 将执行的动作
// - 一个布尔值表明事件是否仅被执行一次 (默认 否)
var event1 = new BABYLON.AnimationEvent(50, function() { console.log("Yeah!"); }, true);
// 将你的事件附加到动画上
animation.addEvent(event1);
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's pretend that you have been working on a scene file at home, and after many tries, you just cannot get it to work properly.&amp;nbsp; You could copy your home createScene function, then visit the playground, press its **CLEAR** button to empty its editor window, and then paste YOUR createScene function into the editor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T073957Z" creationid="aceway" creationdate="20160404T073957Z">
        <seg>让我们假设,你在一直在家中创建了一个场景文件, 经过多次尝试, 它就是不能正常工作.&amp;nbsp; 你可以复制你家里的 createScene 函数, 然后访问娱乐展示页面, 点击 **清除** 按钮 来清空编辑窗口, 最后把你的 createScene 函数粘贴到编辑区域里.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maybe now you want to build an Animation for box1.scaling.y, and really get box1 moving playfully.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T105655Z" creationid="aceway" creationdate="20160402T105655Z">
        <seg>现在你也许希望在y轴上缩放box1, 而且实时移动box1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most important, though, is the Babylon.js framework, our pride and joy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T133717Z" creationid="aceway" creationdate="20160403T133717Z">
        <seg>最重要是 Babylon.js 框架, 我们的骄傲与荣幸.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Much information is in the parameters:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054024Z" creationid="aceway@qq.com" creationdate="20160331T014205Z">
        <seg>更多信息在参数里：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, two important steps:
* Adding the animation array to the animation object:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085505Z" creationid="aceway@qq.com" creationdate="20160331T085505Z">
        <seg>紧接着，最重要的两步：
* 将存有动画信息的数组添加到动画对象上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that we have our Animation object, it is time to say how those values will be modified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T083112Z" creationid="aceway@qq.com" creationdate="20160331T083112Z">
        <seg>现在我们已经有动画对象了，可以谈论如何修改那些值了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Our goal: move this “box1”.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054015Z" creationid="aceway@qq.com" creationdate="20160331T014128Z">
        <seg>我们的目标是：移动这个"box1"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press the playground's **RUN** button and see if it works.&amp;nbsp; If it does not work, you can do some changes in the editor window, and hit **RUN** again... and again, and again.&amp;nbsp; Experiment with it there, and if you still cannot get it to work, you can press the **SAVE** button.&amp;nbsp; When you do that, the playground will give your scene a unique URL.&amp;nbsp; It will look something like this:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T074453Z" creationid="aceway" creationdate="20160404T074453Z">
        <seg>按下娱乐展示的**运行**按钮,看看它是否有效.&amp;nbsp; 如果不正常, 你可以在编辑窗口里做些修改, 然后再次点击 **运行** ... 如此不断调整.&amp;nbsp; Experiment with it there, and if you still cannot get it to work, you can press the **SAVE** button.&amp;nbsp; When you do that, the playground will give your scene a unique URL.&amp;nbsp; It will look something like this:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the 'createScene' function in the left-side code editing window?&amp;nbsp; Does it look familiar?&amp;nbsp; It is the very same code from the purple section of the big picture (but with a couple of word-wrapped lines).&amp;nbsp; Now you can see why the createScene function is an important section.&amp;nbsp; It is somewhat portable.&amp;nbsp; You can copy createScene functions to/from the playground editor, and to/from your home scene files.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T034539Z" creationid="aceway" creationdate="20160404T034539Z">
        <seg>看到左边代码窗口里的 'createScene' 函数里么?&amp;nbsp; 看起来熟悉吧?&amp;nbsp; 它是和大图片里的紫色部分非常像的代码(只是多了些换行).&amp;nbsp; 现在你该清楚了为什么那个 createScene 函数是一个重要的部分.&amp;nbsp; 它是有一定可移植性的.&amp;nbsp; 你能够在 createScene 函数和你本地的场景文件之间将代码拷来拷去.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T083415Z" creationid="aceway@qq.com" creationdate="20160331T083415Z">
        <seg>如此:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Someday, you may want to 'externalize' these styles by placing them in a separate file, possibly called styles.css.&amp;nbsp; Then you could remove the blue section from this HTML file, and use a HTML LINK element/tag to include-in that separate CSS style document.&amp;nbsp; I will not be telling you how to do that, but there are plenty of documents on the web that will show you how.&amp;nbsp; It is very easy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030046Z" creationid="aceway" creationdate="20160404T002058Z">
        <seg>有一天, 你希望通过把这些样式内容放在单独的文件里使它们外部化, 也许可以把文件叫做 styles.css.&amp;nbsp; 那是可以把蓝色部分从这个HTML文件里移除掉, 然后使用HTML LINK元素/标签把样式文件放到里面.&amp;nbsp; 我不回教你怎么做那个, 但是网上满是文档教你如何做的; 它非常简单.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is a BIG picture, isn't it?&amp;nbsp; This is a complete Babylon.js scene, using the 'single HTML file' method.&amp;nbsp; This is not the only (or best) method of setting up a scene, but it is fast and easy.&amp;nbsp; I have colored important sections of 'the big picture' and we will now examine each section individually.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T132127Z" creationid="aceway" creationdate="20160403T132119Z">
        <seg>它是个大图片,不是么? &amp;nbsp; 这是个完整的 Babylon.js 场景, 使用 '简单的 HTML 文件' 的方法.&amp;nbsp; 这不是唯一(也不是最好)的设置一个场景的方法, 但是快速而简单.&amp;nbsp; 我已经在"大图片上"的重要段上标色,而且我们现在就一段段段查看.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The JS code you see inside the green section... will be talked about soon.&amp;nbsp; Mainly, I would like you to study the big picture, and see how the single HTML file method of creating Babylon.js scenes... is structured.&amp;nbsp; I want you to try to visualize and somewhat memorize... this scene file's 'layout'.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030158Z" creationid="aceway" creationdate="20160404T025459Z">
        <seg>你看到的在绿色部分里的 JS 代码... 很快会被讨论到.&amp;nbsp; 我主要是希望你学习下大图片里的内容, 而且弄明白单个HTML文件里的Babylon.js场景是如何创建的.&amp;nbsp; 对这个文件的格式, 我希望你能够尽力留下印象且记得一点点.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ```BABYLON.Animatable``` object also supports the following functions:
- ```pause()```
- ```restart()```
- ```stop()```
- ```reset()```</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T104515Z" creationid="aceway" creationdate="20160402T104515Z">
        <seg>该 ```BABYLON.Animatable``` 对象也支持下列函数:
- ```pause()```
- ```restart()```
- ```stop()```
- ```reset()```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The animation is based on objects called Animation (!!).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T053948Z" creationid="aceway@qq.com" creationdate="20160330T094901Z">
        <seg>基于众多物体对象动画也叫电影片段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code computed at run time must be located in this function:
```javascript
scene.registerBeforeRender(function () {</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151208Z" creationid="aceway" creationdate="20160402T151208Z">
        <seg>运行时的计算代码必须位于这个函数内:
```javascript
scene.registerBeforeRender(function () {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The complex animation lets you choose everything at each frame of the animation (each tick).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160646Z" creationid="aceway" creationdate="20160402T151121Z">
        <seg>复杂动画允许你选择每帧的每样东西(每一瞬间).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first external include is hand.minified-1.2.js (often simply called hand.js) - a small Javascript framework that assists the Babylon.js cameras.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T002241Z" creationid="aceway" creationdate="20160403T132837Z">
        <seg>第一个从外部包含的是 hand.minified-1.2.js (通常简称为hand.js) - 一个用来辅助Babylon.js相机的小Javascript框架.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first is to define a collection of keys and defining your object's situation at each key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160330T154251Z" creationid="aceway" creationdate="20160330T033530Z">
        <seg>第一种方式是定义一系列的键值集合，并且定义好每个键值对应的对象物状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next is cannon.js - an optional physics 'engine' that allows WebGL shapes (meshes) to act like real life objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T133115Z" creationid="aceway" creationdate="20160403T133115Z">
        <seg>下一个是 cannon.js - 一个可选的物理 '引擎', 其使WebGL里的造型(网格)的行为像真实生活里的物体对象.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second way is for more complex animations, when you change animation code at run time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160330T033700Z" creationid="aceway" creationdate="20160330T033700Z">
        <seg>第二种方式可以定义更复杂的动画，在运行是改变动画代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The speed ratio of this animation
optional | onAnimationEnd | () =&gt; void | The function triggered on the end of the animation (also dependent upon ANIMATIONLOOPMODE)
optional | animatable | [Animatable](http://doc.babylonjs.com/classes/Animatable) | An optional specific animation
---</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160331T145934Z" creationid="aceway" creationdate="20160331T144006Z">
        <seg>动画的速率
可选 | onAnimationEnd | () =&gt; void | 该函数在动画的结束被触发调用(同样取决于 ANIMATIONLOOPMODE)
可选 | 可播放 | [Animatable](http://doc.babylonjs.com/classes/Animatable) | 一个可选的特殊动画
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are three possible values you can give for EasingMode: 
- ```BABYLON.EasingFunction.EASINGMODE_EASEIN``` : Interpolation follows the mathematical formula associated with the easing function.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T143727Z" creationid="aceway" creationdate="20160402T143214Z">
        <seg>有三个值你可以用来赋给 EasingMode: 
- ```BABYLON.EasingFunction.EASINGMODE_EASEIN``` : 按照简化函数的数学公式来控制插入.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two primary ways of doing animations in your scene.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160330T033350Z" creationid="aceway" creationdate="20160330T033350Z">
        <seg>有两种主要的方式实现场景动画。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These commands will apply to every animation object contained in the Animatable's ._animations array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T105020Z" creationid="aceway" creationdate="20160402T105020Z">
        <seg>这些指令将应用到包涵在 _animations 数组里的每个动画对象上.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This blended animation will interpolate FROM the current object's state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155922Z" creationid="aceway" creationdate="20160402T111742Z">
        <seg>被渲染了的动画将被添加到当前对象状态上. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be any mesh property, depending upon what you want to change.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T054051Z" creationid="aceway@qq.com" creationdate="20160331T014336Z">
        <seg>这个可以是网格的任何属性，取决于你要修改什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function can be very useful for complex animation like games, where characters have to move depending on many parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T151447Z" creationid="aceway" creationdate="20160402T151409Z">
        <seg>这个函数对复杂动画特别有用,比如一些游戏里角色的移动必需依赖于许多参数.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function returns a ```BABYLON.Animatable``` object that you can use to get access to individual animations (for instance using ```getAnimationByTargetProperty``` function).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T104358Z" creationid="aceway" creationdate="20160402T104358Z">
        <seg>这个函数返回一个 ```BABYLON.Animatable``` 对象,通过该对象能够访问个别的动画 (例如使用 ```getAnimationByTargetProperty``` 功能).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This would be handy for user-controlled walking characters, or reacting to value changes from an input device.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111929Z" creationid="aceway" creationdate="20160402T111929Z">
        <seg>这会对用户很方便 - 例如:控制行走中的角色, 或者实时响应来自输入设备的数据值变化.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To achieve today’s animated scene, we begin by creating our environment:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T161219Z" creationid="aceway@qq.com" creationdate="20160331T014002Z">
        <seg>为了实现今天的动态场景，我们开始创建自己的环境：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to use this function, you need to know that :
- Your animation will have predefined key frames (Only 2 keyframes are generated : **Start** and **End**)
- The animation works only on **AbstractMesh** objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111059Z" creationid="aceway" creationdate="20160402T111059Z">
        <seg>为了使用该函数,你需要知道这些:
- 你的动画需要有预定义的关键帧 (仅有2个关键帧被创建 : **开始** 和 **结束**)
- 这些动画仅在 **AbstractMesh** 对象上有效.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To put dynamics in it, we are going to learn how to tell your computer to move your meshes in any way you choose.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T053931Z" creationid="aceway" creationdate="20160330T033249Z">
        <seg>为了给它注入动态，我们将开始学习如何控制电脑来按照你指定的方式移动你创建的网格对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have now completed an Animation for box1.scaling.x.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155412Z" creationid="aceway" creationdate="20160402T105422Z">
        <seg>现在我们已经完全实现在x轴方向缩放 box1 的动画.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We hope to teach you a large amount of information in a very quick manner.&amp;nbsp; Often there are more ways than one to accomplish a task here.&amp;nbsp; I will let you discover those other ways by yourself.&amp;nbsp; For now we will teach you the quickest and easiest ways, determined by studying the traits of other new users of Babylon.js.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T034041Z" creationid="aceway" creationdate="20160403T033419Z">
        <seg>我们希望以一种非常快速的方式教给你大量的信息.&amp;nbsp; 通常这里的任务都有多于一种方式达成.&amp;nbsp; 我希望你自己去发现其它的方式.&amp;nbsp; 根据对Babylon.js初学者特点的研究, 现在我们教你最快最简单的方式.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Welcome to The Babylon.js Primer, an introduction to some of the things you will need to know in order to get the most out of this useful Javascript-based WebGL framework.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T032215Z" creationid="aceway" creationdate="20160403T032215Z">
        <seg>欢迎阅读 Babylon.js 初级教程, 这是后面学习最棒的基于Javascript的网页图形库框架所需必备知识的一个基础介绍.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What is a framework, you ask?&amp;nbsp; You can think of a framework as scaffolding for a building, allowing you to build around it without worrying about the foundation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160403T032705Z" creationid="aceway" creationdate="20160403T032705Z">
        <seg>你想知道什么是框架么?&amp;nbsp; 你可以把框架认为成 建筑里的脚手架, 它支撑你围绕它创建新东西而不必为底层细节操心.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add some behaviors to your animations, using easing functions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T125451Z" creationid="aceway" creationdate="20160402T125451Z">
        <seg>你可以使用简化函数给动画添加一些不同的行为.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also get access to current running ```BABYLON.Animatable``` objects by using ```scene.getAnimatableByTarget()``` providing the target object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T105257Z" creationid="aceway" creationdate="20160402T105257Z">
        <seg>通过提供目标对象来调用 ```scene.getAnimatableByTarget()``` 你也可以访问当前正在运行的 ```BABYLON.Animatable``` 对象.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can play with bezier curve algorithm too, using the **BezierCurveEase(x1, y1, x2, y2)** function.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160449Z" creationid="aceway" creationdate="20160402T145650Z">
        <seg>你也能用贝塞尔曲线的算法, 使用 **BezierCurveEase(x1, y1, x2, y2)** 函数.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an extended function to create a quick animation:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T110722Z" creationid="aceway" creationdate="20160402T110702Z">
        <seg>通过一个扩展函数你可以创建快速动画:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the **EasingMode** property to alter how the easing function behaves, that is, change how the animation interpolates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T142847Z" creationid="aceway" creationdate="20160402T142839Z">
        <seg>你可以使用 **EasingMode** 这个属性来修改简化函数的行为, 也就是, 改变动画是如何插入的.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You could 'externalize' the entire green section, and possibly place it into a file called... 'myJavascript.js'... maybe in a folder called 'jsfolder'.&amp;nbsp; Then you could remove the green section, and add one more EXTERNAL INCLUDE script element/tag that might look like this:
``` html
&lt;script src="./jsfolder/myJavascript.js"&gt;&lt;/script&gt;
```
You need not concern yourself with that, at this point.&amp;nbsp; Externalizing your Javascript is often done when you have written LOTS of Javascript code.&amp;nbsp; Externalizing your code into separate files helps your project be organized, but it is not necessary this early in your webGL adventures.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T030142Z" creationid="aceway" creationdate="20160404T005616Z">
        <seg>你可以把绿色部分外部化, 可以把它们放到一个叫做... 'myJavascript.js'文件里, 也许还在个叫做... 'jsfolder'的目录里.&amp;nbsp; 然后你可以移除绿色部分, 且再添加一个外部包含 脚本 元素/标签, 看起来就像这样:
``` html
&lt;script src="./jsfolder/myJavascript.js"&gt;&lt;/script&gt;
```
You need not concern yourself with that, at this point.&amp;nbsp; Externalizing your Javascript is often done when you have written LOTS of Javascript code.&amp;nbsp; Externalizing your code into separate files helps your project be organized, but it is not necessary this early in your webGL adventures.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might want to open that playground scene in a new window or new tab, so you can switch back and forth between here and there.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160404T033725Z" creationid="aceway" creationdate="20160404T033725Z">
        <seg>你也许希望在新的浏览器窗口或标签页来打开娱乐联系的场景, 那样可以通过后退和前进切换不同场景.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene is now becoming dynamic, and all your meshes can move in all directions!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T160839Z" creationid="aceway" creationdate="20160402T152713Z">
        <seg>你的场景现在动起来了, 你的所有网格都可在所有方向上移动!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Final result_</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T053841Z" creationid="aceway@qq.com" creationdate="20160331T013721Z">
        <seg>_最终结果_ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```Javascript
//Create a Vector3 animation at 30 FPS
var animationTorus = new BABYLON.Animation("torusEasingAnimation", "position", 30, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T144921Z" creationid="aceway" creationdate="20160402T144921Z">
        <seg>```Javascript
//创建一个3维空间里的30帧每秒的动画
var animationTorus = new BABYLON.Animation("torusEasingAnimation", "position", 30, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```Javascript
BABYLON.Animation.CreateAndStartAnimation('boxscale', box1, 'scaling.x', 30, 120, 1.0, 1.5);
```
Fast and easy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T111425Z" creationid="aceway" creationdate="20160402T111425Z">
        <seg>```Javascript
BABYLON.Animation.CreateAndStartAnimation('boxscale', box1, 'scaling.x', 30, 120, 1.0, 1.5);
```
快速而简便.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```javascript
// An array with all animation keys
var keys = [];</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T154439Z" creationid="aceway@qq.com" creationdate="20160331T085111Z">
        <seg>```javascript
// 存储所有动画键值的数组
var keys = [];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```javascript
animationBox.setKeys(keys);
```
* Link this animation to our box:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway@qq.com" changedate="20160331T085601Z" creationid="aceway@qq.com" creationdate="20160331T085601Z">
        <seg>```javascript
animationBox.setKeys(keys);
```
* 将动画和对象链接起来</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return FunnyEase;
})(BABYLON.EasingFunction);
```
You will find a complete demonstration of the easing functions behaviors, in the playground : [**Easing function playground**](http://babylonjs-playground.azurewebsites.net/?20)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T150850Z" creationid="aceway" creationdate="20160402T150850Z">
        <seg>return FunnyEase;
})(BABYLON.EasingFunction);
```
在娱乐展示里, 你会找到一个简化函数行为的完整演示: [**简化函数娱乐展示**](http://babylonjs-playground.azurewebsites.net/?20)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>| Name | Type | Description
---|---|---|---</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155325Z" creationid="aceway@qq.com" creationdate="20160331T085752Z">
        <seg> | 名称 | 类型 | 描述
---|---|---|---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>| from | number | The fps starting frame</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155329Z" creationid="aceway@qq.com" creationdate="20160331T085900Z">
        <seg> | 起始| 数 | 开始fps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>| target | any | The target</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155327Z" creationid="aceway@qq.com" creationdate="20160331T085822Z">
        <seg> | 目标 | 任意 | 特定目标</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>| to | number | The fps ending frame
optional | loop | boolean | If true, the animation will loop (dependent upon BABYLON.Animation.ANIMATIONLOOPMODE)
optional | speedRatio | number | default : 1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="aceway" changedate="20160402T155344Z" creationid="aceway@qq.com" creationdate="20160331T085929Z">
        <seg> | 止于 | 数量 | 结束fps
可选 | 循环 | 布尔值 | 如果为真,则动画循环播放 (取决于BABYLON.Animation.ANIMATIONLOOPMODE)
可选 | 速率 | 数值 | 默认 : 1.</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
